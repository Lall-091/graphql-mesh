name: pr
on:
  pull_request:

jobs:
  dependencies:
    if: ${{ github.event.pull_request.title != 'Upcoming Release Changes' }}
    uses: the-guild-org/shared-config/.github/workflows/changesets-dependencies.yml@v1
    with:
      node-version-file: .node-version
    secrets:
      githubToken: ${{ secrets.GUILD_BOT_TOKEN }}

  release:
    if: ${{ github.event.pull_request.title != 'Upcoming Release Changes' }}
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    uses: the-guild-org/shared-config/.github/workflows/release-snapshot.yml@v1
    with:
      node-version-file: .node-version
      npmTag: alpha
      buildScript: build
    secrets:
      githubToken: ${{ secrets.GITHUB_TOKEN }}
      npmToken: ${{ secrets.NODE_AUTH_TOKEN }}

  ghcr:
    runs-on: ubuntu-latest
    needs: [release]
    strategy:
      matrix:
        include:
          - productname: mesh-serve
            packagename: '@graphql-mesh/serve-cli'
          - productname: hive-gateway
            packagename: '@graphql-hive/gateway'
    if: contains(needs.release.outputs.publishedPackages, '@graphql-mesh/serve-cli')
    steps:
      - name: version ${{ matrix.productname }}
        uses: actions/github-script@v7
        id: ver-mesh-serve
        with:
          result-encoding: string
          script: |
            const publishedPackages = ${{ needs.release.outputs.publishedPackages }};
            const meshServe = publishedPackages.find((p) => p.name === '${{ matrix.packagename }}');
            if (!meshServe) {
              return core.setFailed('${{ matrix.packagename }} was not published!');
            }
            console.log(meshServe.version);
            return meshServe.version;
      - name: checkout
        uses: actions/checkout@v4
      - name: Install Required Libraries
        run: sudo apt update && sudo apt install -y libcurl4-openssl-dev libssl-dev
      - name: set up docker buildx
        uses: docker/setup-buildx-action@v3
      - name: log in to ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: set up env
        uses: the-guild-org/shared-config/setup@v1
        with:
          node-version-file: .node-version
      - name: prepare
        run: yarn prebuild
      - name: bundle
        run: yarn bundle
      - name: inject ${{ matrix.productname }} version
        run: |
          yarn workspace ${{ matrix.packagename }} inject-version ${{ steps.ver-mesh-serve.outputs.result }}
      - name: bake and push
        uses: docker/bake-action@v5
        env:
          MESH_SERVE_TAGS: ${{ steps.ver-mesh-serve.outputs.result }}
        with:
          targets: ${{ matrix.productname }}
          set: |
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max
          push: true
      - name: comment on pr
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: Docker Image for ${{ matrix.productname }}
          message: |
            Published images for this PR are available at:
            ```
            ghcr.io/ardatan/${{ matrix.productname }}:${{ steps.ver-mesh-serve.outputs.result }}
            ```

  package-node-sea-github-comment-progress:
    runs-on: ubuntu-latest
    steps:
      - name: Initialize PR comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: 'Node Sea Artifacts Status'
          message: |
            The build artifacts for various platforms are being generated:
            | Platform               | Architecture | Status         |
            |------------------------|--------------|----------------|
            | Ubuntu (latest)        | x86_64       | ⏳ In Progress |
            | Ubuntu (latest)        | arm64        | ⏳ In Progress |
            | macOS (latest)         | x86_64       | ⏳ In Progress |
            | macOS (latest)         | arm64        | ⏳ In Progress |
            | Windows (latest)       | x86_64       | ⏳ In Progress |

  package-node-sea:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x86_64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64 # exclude Windows from ARM64

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: the-guild-org/shared-config/setup@v1
        name: set up env
        with:
          node-version-file: .node-version

      - name: generate landing page
        run: yarn workspace @graphql-mesh/serve-runtime generate-landing-page-html

      - name: Build the project
        working-directory: ./packages/serve-cli
        run: yarn bundle-binary

      - name: Package for ${{ matrix.os }} ${{ matrix.arch }}
        working-directory: ./packages/serve-cli
        run: ./bundle.sh ${{ matrix.os }} ${{ matrix.arch }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: graphql-mesh-${{ matrix.arch }}-${{ matrix.os }}
          path: packages/serve-cli/graphql-mesh-${{ matrix.arch }}-${{ matrix.os }}

      - name: Generate updated comment
        id: update_comment
        run: |
          TARGET_OS=${{ matrix.os }}
          TARGET_ARCH=${{ matrix.arch }}
          ARTIFACT_NAME=graphql-mesh-${{ matrix.arch }}-${{ matrix.os }}
          COMMENT=$(gh pr view ${{ github.event.pull_request.number }} --json body -q .body)
          NEW_COMMENT="| $TARGET_OS | $TARGET_ARCH | [Download](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts?name=$ARTIFACT_NAME) |"
          # Check if the line for the specific target is already present
          if grep -q "| $TARGET_OS | $TARGET_ARCH |" <<< "$COMMENT"; then
            # Replace the in-progress line with the new download link
            UPDATED_COMMENT=$(echo "$COMMENT" | sed "s/| $TARGET_OS | $TARGET_ARCH | .* |/$NEW_COMMENT/")
          else
            # Append the new line
            UPDATED_COMMENT=$(echo "$COMMENT" | sed "/| Windows (latest) | x86_64 | ⏳ In Progress |/a $NEW_COMMENT")
          fi
          echo "$UPDATED_COMMENT" > updated_comment.md

      - name: Update PR comment with artifact link
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: 'Node Sea Artifacts Status'
          message: ${{ steps.update_comment.outputs.comment }}
